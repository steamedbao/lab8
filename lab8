//Q1

// CX1007 Data Structures
// Week 9 Lab Tutorial - DynamicData-Linked Lists
// Template for Q1

#include "stdlib.h"
#include "stdio.h"

////////////////////////////////////////////////////////////

void insert(char *s,int n);
void removes(char *s, int n);

//////////////////////////////////////////////////////////
void main ()
{
	int n;
    char *s;
	int choice;


	printf("How many characters do you want to input:");
	scanf("%d", &n);

	s=(char *)malloc((n+1)*sizeof(char));

    if (s==NULL)
	{
		printf("can't allocate the memory!");
		return;
	}

	printf("Input the string:");
	scanf("%s",s);

	printf("The string is %s\n", s);

	do
	{
		printf("Do you want to 1-insert or 2-remove or 3-quit?:");
		scanf("%d",&choice);
		//getchar(); //to clear the return carriage in the buffer

		if (choice==1)
			insert(s,n);
		else if (choice==2)
			removes(s,n);
	}while (choice!=3);


}

//////////////////////////////////////////
void removes(char *s, int n)
{
	// write your code here
	int i;
    for (i=0;i<n;i++)
    {
        *(s+i)=*(s+i+1);
    }
    printf("Resulting string: %s\n", s);

}

//////////////////////////////////////////
void insert(char *s, int n)
{
	// write your code here
	int i;

	for (i=n;i>0;i--)
    {
        *(s+i)=*(s+i-1);
    }

    *(s+n) = '\0';

    printf("What is the character you want to insert:");
    getchar();
    scanf("%c",&s);
    printf("Resulting string: %s\n",s);
}

__________________________________________________________________

//Q2 : scan list of no., dynamic storage
// CX1007 Data Structures
// Week 9 Lab Tutorial - DynamicData-Linked Lists
// Template for Q2

//#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdio.h>

////////////////////////////////////////////////////////////

typedef struct _listnode{
	int item;
	struct _listnode *next;
} ListNode;


void main()
{
	ListNode *head, *p, *temp;
	int n;


	head=NULL;
	p=NULL;		// pointing to the last node in the list
	printf("Enter a list of numbers, terminated by the value -1:\n");

	/////////////////////////////////////////////////////////////////

	//Question 2
    //Write your program code here

    scanf("%d",&n);
    while (n!=-1)
    {
        if (head==NULL){
            head = (ListNode*)malloc(sizeof(ListNode));
            p = head;
        }
        else {
            p->next = (ListNode*)malloc(sizeof(ListNode));
            p=p->next;
        }
        p->item=n;
        p->next=NULL;
        scanf("%d",&n);

    }
    printf("Current list:");
    p=head;
    while (p!=NULL)
    {
        printf("%d ",p->item);
        p=p->next;
    }
    printf("\n");
    scanf("Enter value to search for:"; //Q3
    searchList(head,n);
    p = head;
	  while (p!= NULL) {
        temp = p->next;   //So that program wont crash
		free(p);
		p=p->next;
	  }
	  p=temp=head=NULL;

    

   //////////////////////////////////////////////////////////////////
}

//Q3 together with Q2

int searchList(ListNode *head, int value)
{

////////////////////////////////////////////////////////////////////

 // Question 3
 //Write your program code here
    int i = 0;
    ListNode *p = head;
    while (head!=value)


    while (p!=NULL)
    {
        if (p->item == value)
        {
            printf("Value %d found at index %d\n",value,i);
            return i;
        }
        p = p->next;
        i++;
    }
    printf("Value %d cannot be foun/!n",value);
    return -1;



//////////////////////////////////////////////////////////////////////
}


